{"version":3,"sources":["adf.js","column.js","dashboard.js","provider.js","row.js","widget-content.js","widget.js","angular-dashboard-framework.tpl.js"],"names":["angular","module","value","directive","$log","$compile","adfTemplatePath","rowTemplate","dashboard","moveWidgetInColumn","$scope","column","evt","widgets","$apply","splice","newIndex","oldIndex","findWidget","index","widget","i","length","w","wid","findColumn","model","rows","r","j","columns","c","cid","getId","el","id","getAttribute","parseInt","addWidgetToColumn","targetColumn","from","sourceColumn","item","warn","removeWidgetFromColumn","applySortable","$element","sortable","Sortable","create","group","handle","ghostClass","animation","onAdd","onRemove","onUpdate","on","destroy","restrict","replace","scope","editMode","adfModel","collapsible","templateUrl","link","col","isDefined","isArray","cloned","append","$rootScope","$modal","copyWidgets","source","target","shift","push","fillStructure","root","counter","forEach","row","readColumns","changeStructure","structure","copy","createConfiguration","type","cfg","config","transclude","name","editable","adfWidgetFilter","controller","widgetFilter","structureName","$watch","oldVal","newVal","structures","error","title","editClass","toggleEditMode","modelCopy","$broadcast","cancelEditMode","editDashboardDialog","editDashboardScope","$new","instance","open","info","closeDialog","close","$destroy","addWidgetDialog","addScope","isFunction","opts","addWidget","unshift","compile","$attrs","$attr","provider","widgetsPath","messageTemplate","loadingTemplate","this","extend","reload","edit","path","template","$get","columnTemplate","$q","$sce","$http","$templateCache","$controller","$injector","parseUrl","url","parsedUrl","indexOf","substring","getTemplate","deferred","defer","resolve","tpl","get","getTrustedResourceUrl","success","response","put","reject","promise","compileWidget","currentScope","content","html","templateScope","base","resolvers","$tpl","key","isString","invoke","all","then","locals","templateCtrl","controllerAs","children","data","contents","reason","msg","$on","stringToBoolean","string","toLowerCase","Boolean","preLink","definition","fromJson","isCollapsed","debug","postLink","remove","editScope","pre","post","run"],"mappings":"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","file":"angular-dashboard-framework.min.js","sourcesContent":["/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf', ['adf.provider', 'ui.bootstrap'])\n  .value('adfTemplatePath', '../src/templates/')\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" collapsible=\"collapsible\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" collapsible=\"collapsible\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n  .value('adfVersion', '<<adfVersion>>');\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumn', function ($log, $compile, adfTemplatePath, rowTemplate, dashboard) {\n    'use strict';\n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (w.wid === index){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if ( c.cid === index ){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? parseInt(id) : -1;\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.glyphicon-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        sortable.destroy();\n      });\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        adfModel: '=',\n        collapsible: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid){\n          col.cid = dashboard.id();\n        }\n\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\n          $compile(rowTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        } else {\n          // enable drag and drop for widget only columns\n          applySortable($scope, $element, $scope.adfModel, col);\n        }\n      }\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n */\n\nangular.module('adf')\n  .directive('adfDashboard', function ($rootScope, $log, $modal, dashboard, adfTemplatePath) {\n    'use strict';\n\n    function copyWidgets(source, target) {\n      if ( source.widgets && source.widgets.length > 0 ){\n        var w = source.widgets.shift();\n        while (w){\n          target.widgets.push(w);\n          w = source.widgets.shift();\n        }\n      }\n    }\n\n    /**\n    * Copy widget from old columns to the new model\n    * @param object root the model\n    * @param array of columns\n    * @param counter\n    */\n    function fillStructure(root, columns, counter) {\n      counter = counter || 0;\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (column) {\n            // if the widgets prop doesn't exist, create a new array for it.\n            // this allows ui.sortable to do it's thing without error\n            if (!column.widgets) {\n              column.widgets = [];\n            }\n\n            // if a column exist at the counter index, copy over the column\n            if (angular.isDefined(columns[counter])) {\n              // do not add widgets to a column, which uses nested rows\n              if (!angular.isDefined(column.rows)){\n                copyWidgets(columns[counter], column);\n                counter++;\n              }\n            }\n\n            // run fillStructure again for any sub rows/columns\n            counter = fillStructure(column, columns, counter);\n          });\n        });\n      }\n      return counter;\n    }\n\n    /**\n    * Read Columns: recursively searches an object for the 'columns' property\n    * @param object model\n    * @param array  an array of existing columns; used when recursion happens\n    */\n    function readColumns(root, columns) {\n      columns = columns || [];\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (col) {\n            columns.push(col);\n            // keep reading columns until we can't any more\n            readColumns(col, columns);\n          });\n        });\n      }\n\n      return columns;\n    }\n\n    function changeStructure(model, structure){\n      var columns = readColumns(model);\n      var counter = 0;\n\n      model.rows = angular.copy(structure.rows);\n\n      while ( counter < columns.length ){\n        counter = fillStructure(model, columns, counter);\n      }\n    }\n\n    function createConfiguration(type){\n      var cfg = {};\n      var config = dashboard.widgets[type].config;\n      if (config){\n        cfg = angular.copy(config);\n      }\n      return cfg;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude : false,\n      scope: {\n        structure: '@',\n        name: '@',\n        collapsible: '@',\n        editable: '@',\n        adfModel: '=',\n        adfWidgetFilter: '='\n      },\n      controller: function($scope){\n        var model = {};\n        var structure = {};\n        var widgetFilter = {};\n        var structureName = {};\n        var name = $scope.name;\n\n        // Watching for changes on adfModel\n        $scope.$watch('adfModel', function(oldVal, newVal) {\n          // has model changed or is the model attribute not set\n          if (newVal !== null || (oldVal === null && newVal === null)) {\n            model = $scope.adfModel;\n            widgetFilter = $scope.adfWidgetFilter;\n            if ( ! model || ! model.rows ){\n              structureName = $scope.structure;\n              structure = dashboard.structures[structureName];\n              if (structure){\n                if (model){\n                  model.rows = angular.copy(structure).rows;\n                } else {\n                  model = angular.copy(structure);\n                }\n                model.structure = structureName;\n              } else {\n                $log.error( 'could not find structure ' + structureName);\n              }\n            }\n\n            if (model) {\n              if (!model.title){\n                model.title = 'Dashboard';\n              }\n              $scope.model = model;\n            } else {\n              $log.error('could not find or create model');\n            }\n          }\n        }, true);\n\n        // edit mode\n        $scope.editMode = false;\n        $scope.editClass = '';\n\n        $scope.toggleEditMode = function(){\n          $scope.editMode = ! $scope.editMode;\n    \t\t  if ($scope.editMode){\n            $scope.modelCopy = angular.copy($scope.adfModel, {});\n    \t\t  }\n\n          if (!$scope.editMode){\n            $rootScope.$broadcast('adfDashboardChanged', name, model);\n          }\n        };\n\n        $scope.cancelEditMode = function(){\n          $scope.editMode = false;\n\t\t      $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n        };\n\n        // edit dashboard settings\n        $scope.editDashboardDialog = function(){\n          var editDashboardScope = $scope.$new();\n          // create a copy of the title, to avoid changing the title to\n          // \"dashboard\" if the field is empty\n          editDashboardScope.copy = {\n            title: model.title\n          };\n          editDashboardScope.structures = dashboard.structures;\n          var instance = $modal.open({\n            scope: editDashboardScope,\n            templateUrl: adfTemplatePath + 'dashboard-edit.html'\n          });\n          $scope.changeStructure = function(name, structure){\n            $log.info('change structure to ' + name);\n            changeStructure(model, structure);\n          };\n          editDashboardScope.closeDialog = function(){\n            // copy the new title back to the model\n            model.title = editDashboardScope.copy.title;\n            // close modal and destroy the scope\n            instance.close();\n            editDashboardScope.$destroy();\n          };\n        };\n\n        // add widget dialog\n        $scope.addWidgetDialog = function(){\n          var addScope = $scope.$new();\n          var widgets;\n          if (angular.isFunction(widgetFilter)){\n            widgets = {};\n            angular.forEach(dashboard.widgets, function(widget, type){\n              if (widgetFilter(widget, type)){\n                widgets[type] = widget;\n              }\n            });\n          } else {\n            widgets = dashboard.widgets;\n          }\n          addScope.widgets = widgets;\n          var opts = {\n            scope: addScope,\n            templateUrl: adfTemplatePath + 'widget-add.html'\n          };\n          var instance = $modal.open(opts);\n          addScope.addWidget = function(widget){\n            var w = {\n              type: widget,\n              config: createConfiguration(widget)\n            };\n            addScope.model.rows[0].columns[0].widgets.unshift(w);\n            instance.close();\n\n            addScope.$destroy();\n          };\n          addScope.closeDialog = function(){\n            instance.close();\n            addScope.$destroy();\n          };\n        };\n      },\n      compile: function($element, $attrs){\n        if (!angular.isDefined($attrs.editable)){\n          $attrs.editable = true;\n        }\n      },\n      link: function ($scope, $element, $attr) {\n        // pass attributes to scope\n        $scope.name = $attr.name;\n        $scope.structure = $attr.structure;\n        $scope.editable = $attr.editable;\n      },\n      templateUrl: adfTemplatePath + 'dashboard.html'\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', [])\n  .provider('dashboard', function(){\n\n    var widgets = {};\n    var widgetsPath = '';\n    var structures = {};\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n    var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#widget\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new widget.\n    *\n    * @param {string} name of the widget\n    * @param {object} widget to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `title` - `{string=}` - The title of the widget.\n    *   - `description` - `{string=}` - Description of the widget.\n    *   - `config` - `{object}` - Predefined widget configuration.\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\n    *      associated with newly created scope of the widget or the name of a\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n    *      if passed as a string.\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *   - `template` - `{string=|function()=}` - html template as a string.\n    *   - `templateUrl` - `{string=}` - path to an html template.\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the widget\n    *      will wait for them all to be resolved or one to be rejected before the controller is\n    *      instantiated.\n    *      If all the promises are resolved successfully, the values of the resolved promises are\n    *      injected.\n    *\n    *      The map object is:\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n    *        and the return value is treated as the dependency. If the result is a promise, it is\n    *        resolved before its value is injected into the controller.\n    *   - `edit` - `{object}` - Edit modus of the widget.\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n    *        Default is true.\n    *\n    * @returns {Object} self\n    */\n    this.widget = function(name, widget){\n      var w = angular.extend({reload: false}, widget);\n      if ( w.edit ){\n        var edit = {reload: true};\n        angular.extend(edit, w.edit);\n        w.edit = edit;\n      }\n      widgets[name] = w;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#widgetsPath\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Sets the path to the directory which contains the widgets. The widgets\n     * path is used for widgets with a templateUrl which contains the\n     * placeholder {widgetsPath}. The placeholder is replaced with the\n     * configured value, before the template is loaded, but the template is\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n     * The default value of widgetPaths is ''.\n     *\n     *\n     * @param {string} path to the directory which contains the widgets\n     *\n     * @returns {Object} self\n     */\n    this.widgetsPath = function(path){\n      widgetsPath = path;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#structure\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new structure.\n    *\n    * @param {string} name of the structure\n    * @param {object} structure to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n    *     - `styleClass` - `{string}` - CSS Class of the row.\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\n    *       - `styleClass` - `{string}` - CSS Class of the column.\n    *\n    * @returns {Object} self\n    */\n    this.structure = function(name, structure){\n      structures[name] = structure;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#messageTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template for messages.\n    *\n    * @param {string} template for messages.\n    *\n    * @returns {Object} self\n    */\n    this.messageTemplate = function(template){\n      messageTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#loadingTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template which is displayed as\n    * long as the widget resources are not resolved.\n    *\n    * @param {string} loading template\n    *\n    * @returns {Object} self\n    */\n    this.loadingTemplate = function(template){\n      loadingTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc object\n    * @name adf.dashboard\n    * @description\n    *\n    * The dashboard holds all options, structures and widgets.\n    *\n    * @returns {Object} self\n    */\n    this.$get = function(){\n      var cid = 0;\n\n      return {\n        widgets: widgets,\n        widgetsPath: widgetsPath,\n        structures: structures,\n        messageTemplate: messageTemplate,\n        loadingTemplate: loadingTemplate,\n        id: function(){\n          return ++cid;\n        }\n      };\n    };\n\n  });\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\n    'use strict';\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        collapsible: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: function ($scope, $element) {\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n          $compile(columnTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n  .directive('adfWidgetContent', function($log, $q, $sce, $http, $templateCache,\n    $compile, $controller, $injector, dashboard) {\n\n    function parseUrl(url){\n      var parsedUrl = url;\n      if ( url.indexOf('{widgetsPath}') >= 0 ){\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                       .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0){\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    function getTemplate(widget){\n      var deferred = $q.defer();\n\n      if ( widget.template ){\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl){\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n            .success(function(response){\n              // put response to cache, with unmodified url as key\n              $templateCache.put(widget.templateUrl, response);\n              deferred.resolve(response);\n            })\n            .error(function(){\n              deferred.reject('could not load template');\n            });\n        }\n      }\n\n      return deferred.promise;\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      // display loading template\n      $element.html(dashboard.loadingTemplate);\n\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        widget: model,\n        config: model.config\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs){\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n      });\n\n      // destroy old scope\n      if (currentScope){\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        model: '=',\n        content: '='\n      },\n      link: function($scope, $element) {\n        var currentScope = compileWidget($scope, $element, null);\n        $scope.$on('widgetConfigChanged', function(){\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n        $scope.$on('widgetReload', function(){\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n      }\n    };\n\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n  .directive('adfWidget', function($log, $modal, dashboard, adfTemplatePath) {\n\n    function stringToBoolean(string){\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\n        case 'true': case 'yes': case '1': return true;\n        case 'false': case 'no': case '0': case null: return false;\n        default: return Boolean(string);\n      }\n    }\n\n    function preLink($scope){\n      var definition = $scope.definition;\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n          // pass title\n          if (!definition.title){\n            definition.title = w.title;\n          }\n\n          // set id for sortable\n          if (!definition.wid){\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          // create config object\n          var config = definition.config;\n          if (config) {\n            if (angular.isString(config)) {\n              config = angular.fromJson(config);\n            }\n          } else {\n            config = {};\n          }\n\n          // pass config to scope\n          $scope.config = config;\n\n          // convert collapsible to string\n          $scope.collapsible = stringToBoolean($scope.collapsible);\n\n          // collapse\n          $scope.isCollapsed = false;\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind close function\n        $scope.close = function() {\n          var column = $scope.col;\n          if (column) {\n            var index = column.widgets.indexOf(definition);\n            if (index >= 0) {\n              column.widgets.splice(index, 1);\n            }\n          }\n          $element.remove();\n        };\n\n        // bind reload function\n        $scope.reload = function(){\n          $scope.$broadcast('widgetReload');\n        };\n\n        // bind edit function\n        $scope.edit = function() {\n          var editScope = $scope.$new();\n\n          var opts = {\n            scope: editScope,\n            templateUrl: adfTemplatePath + 'widget-edit.html'\n          };\n\n          var instance = $modal.open(opts);\n          editScope.closeDialog = function() {\n            instance.close();\n            editScope.$destroy();\n\n            var widget = $scope.widget;\n            if (widget.edit && widget.edit.reload){\n              // reload content after edit dialog is closed\n              $scope.$broadcast('widgetConfigChanged');\n            }\n          };\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: adfTemplatePath + 'widget.html',\n      scope: {\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        collapsible: '='\n      },\n      compile: function compile(){\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n  });\n","angular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column edit-mode=editMode collapsible=collapsible>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>Edit Dashboard</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=dashboardTitle>Title</label> <input type=text class=form-control id=dashboardTitle ng-model=copy.title required> </div> <div class=form-group> <label>Structure</label> <div class=radio ng-repeat=\\\"(key, structure) in structures\\\"> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> {{key}} </label> </div> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass>  </div> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <h1> {{model.title}} <span style=\\\"font-size: 16px\\\" class=pull-right> <a href ng-if=editMode title=\\\"add new widget\\\" ng-click=addWidgetDialog()> <i class=\\\"glyphicon glyphicon-plus-sign\\\"></i> </a> <a href ng-if=editMode title=\\\"edit dashboard\\\" ng-click=editDashboardDialog()> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href ng-if=editable title=\\\"{{editMode ? \\'save changes\\' : \\'enable edit mode\\'}}\\\" ng-click=toggleEditMode()> <i class=glyphicon x-ng-class=\\\"{\\'glyphicon-edit\\' : !editMode, \\'glyphicon-save\\' : editMode}\\\"></i> </a> <a href ng-if=editMode title=\\\"undo changes\\\" ng-click=cancelEditMode()> <i class=\\\"glyphicon glyphicon-repeat adf-flip\\\"></i> </a> </span> </h1> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <adf-dashboard-row row=row adf-model=model collapsible=collapsible ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode> </adf-dashboard-row></div> </div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>Add new widget</h4> </div> <div class=modal-body> <div style=\\\"display: inline-block;\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"(key, widget) in widgets\\\"> <a href ng-click=addWidget(key)> {{widget.title}} </a> </dt> <dd ng-repeat-end=\\\"\\\" ng-if=widget.description> {{widget.description}} </dd> </dl> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div>\");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>{{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle>Title</label> <input type=text class=form-control id=widgetTitle ng-model=definition.title placeholder=\\\"Enter title\\\" required> </div> </form> <div ng-if=widget.edit> <adf-widget-content model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div>\");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} class=\\\"widget panel panel-default\\\"> <div class=\\\"panel-heading clearfix\\\"> <h3 class=panel-title> {{definition.title}} <span class=pull-right> <a href title=\\\"reload widget content\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a href title=\\\"change widget location\\\" class=adf-move ng-if=editMode> <i class=\\\"glyphicon glyphicon-move\\\"></i> </a>  <a href title=\\\"collapse widget\\\" ng-show=\\\"collapsible && !isCollapsed\\\" ng-click=\\\"isCollapsed = !isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-minus\\\"></i> </a>  <a href title=\\\"expand widget\\\" ng-show=\\\"collapsible && isCollapsed\\\" ng-click=\\\"isCollapsed = !isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-plus\\\"></i> </a>  <a href title=\\\"edit widget configuration\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a>  <a href title=\\\"remove widget\\\" ng-click=close() ng-if=editMode> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </span> </h3> </div> <div class=panel-body collapse=isCollapsed> <adf-widget-content model=definition content=widget> </adf-widget-content></div> </div> \");}]);"],"sourceRoot":"/source/"}